//dp[a][b][0] represent how much max tree you can cut after a and b indeces when look left
//similarly  fro right
//https://www.spoj.com/problems/MAXWOODS/
/*/-----


    Written By:- Sajal Agrawal
          (Have Patience)

/*/
#include<bits/stdc++.h>
using namespace std;
#pragma GCC target ("avx2")
#pragma GCC optimization ("O3")
#pragma GCC optimization ("unroll-loops")
#define ll long long int
#define f(i,a,b) for(ll i=a;i<b;i++)
#define mod 1000000007
#define fi first
#define se second
#define pa pair <ll,ll>
#define mp make_pair
#define c(t) cout<<t<<"\n"
#define pb push_back
#define endl '\n'
ll dp[210][210][2];
ll solve(char a[][210],ll n,ll m,ll i,ll j,ll look){
if(i>=n||j>=m||i<0||j<0){
return 0;
}
if(a[i][j]=='#'){
    return 0;
}
if(dp[i][j][look]!=-1){
    return dp[i][j][look];
}
ll ans=INT_MIN;
if(look==0){

if(a[i][j]=='T'){
 
ans=(1+solve(a,n,m,i,j+1,look));
ans=max(ans,(1+solve(a,n,m,i+1,j,look^1)));
}

if(a[i][j]=='0'){

ans=max(ans,(solve(a,n,m,i,j+1,look)));
ans=max(ans,(solve(a,n,m,i+1,j,look^1)));
}
}
else if(look==1){
 if(a[i][j]=='T'){

ans=(1+solve(a,n,m,i,j-1,look));

ans=max(ans,(1+solve(a,n,m,i+1,j,look^1)));
}

if(a[i][j]=='0'){

ans=max(ans,(solve(a,n,m,i,j-1,look)));
ans=max(ans,(solve(a,n,m,i+1,j,look^1)));
}   
}

return dp[i][j][look]=ans;
}
int main(){

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    ll t;
    cin>>t;
    while(t--){
ll n,m;
cin>>n>>m;char a[210][210];
for(ll j=0;j<n;j++){
    for(ll k=0;k<m;k++){
        cin>>a[j][k];
    }
}

for(ll j=0;j<=n;j++){
 for(ll k=0;k<=m;k++){          
   dp[j][k][0]=-1;dp[j][k][1]=-1;
    }   
}

ll  i=0,j=0,look=0;

cout<<solve(a,n,m,i,j,look)<<endl;



    }



}

